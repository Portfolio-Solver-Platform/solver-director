"""

Revision ID: e62ef276a868
Revises: 176f933b48d6
Create Date: 2025-10-28 10:18:08.772849

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e62ef276a868'
down_revision: Union[str, Sequence[str], None] = '176f933b48d6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('problem_groups')
    op.drop_table('projects')
    op.drop_table('instances')
    op.drop_table('groups')
    op.drop_table('problems')
    op.drop_table('solver_supported_groups')
    op.drop_table('solvers')
    op.drop_table('solver_images')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('solver_images',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('solver_images_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('image_path', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='solver_images_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('solvers',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('solvers_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('solver_images_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['solver_images_id'], ['solver_images.id'], name='solvers_solver_images_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='solvers_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('solver_supported_groups',
    sa.Column('solver_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], name=op.f('solver_supported_groups_group_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['solver_id'], ['solvers.id'], name=op.f('solver_supported_groups_solver_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('solver_id', 'group_id', name=op.f('solver_supported_groups_pkey'))
    )
    op.create_table('problems',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('problems_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('file_data', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('content_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_instances_self_contained', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='problems_pkey'),
    sa.UniqueConstraint('name', name='problems_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('groups',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('groups_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='groups_pkey'),
    sa.UniqueConstraint('name', name='groups_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('instances',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('problem_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('file_data', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('content_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['problem_id'], ['problems.id'], name=op.f('instances_problem_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('instances_pkey'))
    )
    op.create_table('projects',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('solver_controller_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('projects_pkey')),
    sa.UniqueConstraint('solver_controller_id', name=op.f('projects_solver_controller_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('problem_groups',
    sa.Column('problem_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], name=op.f('problem_groups_group_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['problem_id'], ['problems.id'], name=op.f('problem_groups_problem_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('problem_id', 'group_id', name=op.f('problem_groups_pkey'))
    )
    # ### end Alembic commands ###
